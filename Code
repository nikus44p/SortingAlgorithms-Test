using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace ConsoleApp13
{
    class Program
    {
        static void Main(string[] args)
        {
            int[] testSizes = new int[] { 1000, 10000, 100000 };
            string[] algorithmNames = { "Sortowanie bąbelkowe", "Sortowanie przez wybieranie", "Sortowanie przez scalanie", "Sortowanie szybkie","Sortowanie bąbelkowe" };
            string[] dataTypes = { "Losowe", "Rosnące", "Malejące", "Kształt V", "Kształt A", "Stałe" };

            Console.WriteLine("Wybierz algorytm do przetestowania:");
            Console.WriteLine("1 - Sortowanie bąbelkowe");
            Console.WriteLine("2 - Sortowanie przez wybieranie");
            Console.WriteLine("3 - Sortowanie przez scalanie");
            Console.WriteLine("4 - Sortowanie szybkie");
            Console.WriteLine("5 - Sortowanie kubełkowe");
            Console.Write("Twój wybór: ");
            int algorithmType = int.Parse(Console.ReadLine());
            if (algorithmType < 1 || algorithmType > 5)
            {
                Console.WriteLine("Nieprawidłowy wybór. Wybierz liczbę od 1 do 5.");
                return;
            }

            for (int dataType = 1; dataType <= 6; dataType++)
            {
                foreach (var n in testSizes)
                {
                    for (int iteration = 0; iteration < 1; iteration++)
                    {
                        int[] array = GenerateData(n, dataType);

                        Stopwatch stopwatch = new Stopwatch();
                        stopwatch.Start();

                        switch (algorithmType)
                        {
                            case 1:
                                BubbleSort(array);
                                break;
                            case 2:
                                SelectionSort(array);
                                break;
                            case 3:
                                MergeSort(array, 0, array.Length - 1);
                                break;
                            case 4:
                                QuickSort(array, 0, array.Length - 1);
                                break;
                            case 5:
                                BucketSort(array);
                                break;

                        }

                        stopwatch.Stop();
                        Console.WriteLine($"Algorytm: {algorithmNames[algorithmType - 1]}, Typ danych: {dataTypes[dataType - 1]}, Rozmiar danych: {n}, Iteracja: {iteration + 1}, Czas sortowania: {stopwatch.ElapsedMilliseconds} ms");

                        array = null;
                        GC.Collect();
                        GC.WaitForPendingFinalizers();
                    }
                }
            }
        }

        static int[] GenerateData(int n, int dataType)
        {
            int[] array = new int[n];
            switch (dataType)
            {
                case 1: // Losowe
                    Random rand = new Random();
                    for (int i = 0; i < n; i++)
                    {
                        array[i] = rand.Next(0, 100);
                    }
                    break;
                case 2: // Wzrastające 
                    for (int i = 0; i < n; i++)
                    {
                        array[i] = i;
                    }
                    break;
                case 3: // Malejące 
                    for (int i = 0; i < n; i++)
                    {
                        array[i] = n - i - 1;
                    }
                    break;
                case 4: // V-kształtne
                    int middle = n / 2;
                    for (int i = 0; i < middle; i++)
                    {
                        array[i] = middle - i;
                    }
                    for (int i = middle; i < n; i++)
                    {
                        array[i] = i - middle;
                    }
                    break;
                case 5: // A-kształtne
                    middle = n / 2;
                    for (int i = 0; i < middle; i++)
                    {
                        array[i] = i;
                    }
                    for (int i = middle; i < n; i++)
                    {
                        array[i] = n - i - 1;
                    }
                    break;
                case 6: // Stałe
                    for (int i = 0; i < n; i++)
                    {
                        array[i] = 1;
                    }
                    break;
            }

            return array;
        }

        static void BubbleSort(int[] array)
        {
            int length = array.Length;

            for (int i = 0; i < length - 1; i++)
            {
                for (int j = 0; j < length - i - 1; j++)
                {
                    if (array[j] > array[j + 1])
                    {
                        int temp = array[j];
                        array[j] = array[j + 1];
                        array[j + 1] = temp;
                    }
                }
            }
        }

        static void SelectionSort(int[] array)
        {
            int length = array.Length;

            for (int i = 0; i < length - 1; i++)
            {
                int minIndex = i;
                for (int j = i + 1; j < length; j++)
                {
                    if (array[j] < array[minIndex])
                    {
                        minIndex = j;
                    }
                }
                int temp = array[i];
                array[i] = array[minIndex];
                array[minIndex] = temp;
            }
        }

        static void MergeSort(int[] array, int left, int right)
        {
            if (left < right)
            {
                int middle = left + (right - left) / 2;

                MergeSort(array, left, middle);
                MergeSort(array, middle + 1, right);

                Merge(array, left, middle, right);
            }
        }

        static void Merge(int[] array, int left, int middle, int right)
        {
            int[] leftArray = new int[middle - left + 1];
            int[] rightArray = new int[right - middle];

            Array.Copy(array, left, leftArray, 0, middle - left + 1);
            Array.Copy(array, middle + 1, rightArray, 0, right - middle);

            int i = 0;
            int j = 0;
            for (int k = left; k < right + 1; k++)
            {
                if (i == leftArray.Length)
                {
                    array[k] = rightArray[j];
                    j++;
                }
                else if (j == rightArray.Length)
                {
                    array[k] = leftArray[i];
                    i++;
                }
                else if (leftArray[i] <= rightArray[j])
                {
                    array[k] = leftArray[i];
                    i++;
                }
                else
                {
                    array[k] = rightArray[j];
                    j++;
                }
            }
        }

        static void QuickSort(int[] array, int low, int high)
        {
            while (low < high)
            {
                int pi = Partition(array, low, high);

                if (pi - low < high - pi)
                {
                    QuickSort(array, low, pi - 1);
                    low = pi + 1;
                }
                else
                {
                    QuickSort(array, pi + 1, high);
                    high = pi - 1;
                }
            }
        }


        static int Partition(int[] array, int low, int high)
        {
            int mid = low + ((high - low) / 2);
            int medianOfThree = array[new[] { low, mid, high }.OrderBy(x => array[x]).ElementAt(1)];
            int pivotIndex = Array.IndexOf(array, medianOfThree);
            int pivot = array[pivotIndex];
            int temp1 = array[pivotIndex];
            array[pivotIndex] = array[high];
            array[high] = temp1;

            int i = (low - 1);

            for (int j = low; j <= high - 1; j++)
            {
                if (array[j] < pivot)
                {
                    i++;
                    int temp = array[i];
                    array[i] = array[j];
                    array[j] = temp;
                }
            }
            temp1 = array[i + 1];
            array[i + 1] = array[high];
            array[high] = temp1;
            return (i + 1);
        }
        static void BucketSort(int[] array)
        {
            int maxValue = array.Max();
            int minValue = array.Min();
            List<int>[] bucket = new List<int>[maxValue - minValue + 1];

            for (int i = 0; i < bucket.Length; i++)
            {
                bucket[i] = new List<int>();
            }

            for (int i = 0; i < array.Length; i++)
            {
                bucket[array[i] - minValue].Add(array[i]);
            }

            int position = 0;
            for (int i = 0; i < bucket.Length; i++)
            {
                if (bucket[i].Count <= 0)
                {
                    continue;
                }

                for (int j = 0; j < bucket[i].Count; j++)
                {
                    array[position] = bucket[i][j];
                    position++;
                }
            }
        }
    }
}
