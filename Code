using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp13
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.Write("Podaj liczbę elementów do sortowania: ");
            int n = Int32.Parse(Console.ReadLine());

            int[] array = new int[n];
            Random rand = new Random();
            for (int i = 0; i < n; i++)
            {
                array[i] = rand.Next(0, 101);
            }

            Console.WriteLine("Wybierz algorytm sortowania (1 - bąbelkowe, 2 - przez wybieranie, 3 - przez scalanie, 4 - szybkie, 5 - kubełkowe): ");
            int choice = Int32.Parse(Console.ReadLine());

            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();

            switch (choice)
            {
                case 1:
                    BubbleSort(array);
                    break;
                case 2:
                    SelectionSort(array);
                    break;
                case 3:
                    MergeSort(array, 0, array.Length - 1);
                    break;
                case 4:
                    QuickSort(array, 0, array.Length - 1);
                    break;
                case 5:
                    float[] floatArray = Array.ConvertAll(array, x => (float)x / 100);
                    BucketSort(floatArray, floatArray.Length);
                    array = Array.ConvertAll(floatArray, x => (int)(x * 100));
                    break;
                default:
                    Console.WriteLine("Niepoprawny wybór.");
                    break;
            }

            stopwatch.Stop();
            Console.WriteLine($"Czas sortowania: {stopwatch.ElapsedMilliseconds} ms");

            Console.WriteLine("Posortowane elementy: ");
            foreach (var item in array)
            {
                Console.Write(item + " ");
            }
            Console.WriteLine();
        }
    

        static void BubbleSort(int[] array)
        {
            int length = array.Length;

            for (int i = 0; i < length - 1; i++)
            {
                for (int j = 0; j < length - i - 1; j++)
                {
                    if (array[j] > array[j + 1])
                    {
                        int temp = array[j];
                        array[j] = array[j + 1];
                        array[j + 1] = temp;
                    }
                }
            }
        }
        static void SelectionSort(int[] array)
        {
            int length = array.Length;

            for (int i = 0; i < length - 1; i++)
            {
                int minIndex = i;
                for (int j = i + 1; j < length; j++)
                {
                    if (array[j] < array[minIndex])
                    {
                        minIndex = j;
                    }
                }
                int temp = array[i];
                array[i] = array[minIndex];
                array[minIndex] = temp;
            }
        }
        static void MergeSort(int[] array, int left, int right)
        {
            if (left < right)
            {
                int middle = left + (right - left) / 2;

                MergeSort(array, left, middle);
                MergeSort(array, middle + 1, right);

                Merge(array, left, middle, right);
            }
        }

        static void Merge(int[] array, int left, int middle, int right)
        {
            int[] leftArray = new int[middle - left + 1];
            int[] rightArray = new int[right - middle];

            Array.Copy(array, left, leftArray, 0, middle - left + 1);
            Array.Copy(array, middle + 1, rightArray, 0, right - middle);

            int i = 0;
            int j = 0;
            for (int k = left; k < right + 1; k++)
            {
                if (i == leftArray.Length)
                {
                    array[k] = rightArray[j];
                    j++;
                }
                else if (j == rightArray.Length)
                {
                    array[k] = leftArray[i];
                    i++;
                }
                else if (leftArray[i] <= rightArray[j])
                {
                    array[k] = leftArray[i];
                    i++;
                }
                else
                {
                    array[k] = rightArray[j];
                    j++;
                }
            }
        }
        static void QuickSort(int[] array, int low, int high)
        {
            if (low < high)
            {
                int pivot = Partition(array, low, high);

                QuickSort(array, low, pivot - 1);
                QuickSort(array, pivot + 1, high);
            }
        }

        static int Partition(int[] array, int low, int high)
        {
            int pivot = array[high];
            int i = low - 1;

            for (int j = low; j <= high - 1; j++)
            {
                if (array[j] < pivot)
                {
                    i++;
                    Swap(ref array[i], ref array[j]);
                }
            }
            Swap(ref array[i + 1], ref array[high]);
            return (i + 1);
        }

        static void Swap(ref int a, ref int b)
        {
            int t = a;
            a = b;
            b = t;
        }
        static void BucketSort(float[] array, int n)
        {
            if (n <= 0)
                return;

            List<float>[] buckets = new List<float>[n];

            for (int i = 0; i < n; i++)
            {
                buckets[i] = new List<float>();
            }

            for (int i = 0; i < n; i++)
            {
                int bucketIndex = (int)(array[i] * n);
                buckets[bucketIndex].Add(array[i]);
            }

            for (int i = 0; i < n; i++)
            {
                buckets[i].Sort();
            }

            int index = 0;
            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < buckets[i].Count; j++)
                {
                    array[index++] = buckets[i][j];
                }
            }
        }
    }
}
